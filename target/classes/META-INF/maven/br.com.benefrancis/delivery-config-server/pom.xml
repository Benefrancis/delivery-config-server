<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>


	<!-- Por ser um projeto spring-boot existem uma série de configurações que 
		são previamente feitas nesse projeto fazendo com que você não se preocupe 
		com configuração e sim com a implementação de seu produto. Todas as configurações 
		impostas pelo Spring Boot podem ser sobrepostas extendendo a classe que a 
		implementa ou em casos mais simples usando o application.properties -->

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.0.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.benefrancis</groupId>
	<artifactId>delivery-config-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>delivery-config-server</name>
	<description>Centralizador de toda a configuração da nossa rede de Microservices </description>

	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Hoxton.M3</spring-cloud.version>
	</properties>

	<dependencies>


		<!-- Se trata de um sub projeto do Spring Boot. Ele adiciona vários serviços 
			de qualidade de produção à sua aplicação com pouco esforço de sua parte como 
			o famoso /health por exemplo. -->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Essa dependência é uma das mais importantes. Usando-a você já tem 
			um projeto totalmente configurado para trabalhar com qualquer serviço web, 
			como fornecer recursos REST e um tomcat embedded por padrão para subir o 
			projeto. -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Aqui está a dependência mágica que irá transformar nosso MicroService 
			em um Servidor de Configuração sem muito esforço adicional, apenas algumas 
			configurações no application.properties -->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>


		<!-- Por último, e não menos importante, a dependência de testes do Spring. 
			Ela torna nosso projeto apto para a implementação de testes unitários, de 
			API, integração, carga entre diversos outros. -->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>




	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>

</project>
